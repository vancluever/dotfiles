#!/usr/bin/env bash

# The time to warn when there hasn't been a backup in a while, in seconds.
warn_no_backup="86400"

# log prints a message with an optional priority, which controls the color also
# printed if a terminal is present. Messages always go to standard error.
#
# level is optional, and if not specified defaults to info.
log() {
  local message="$1"
  local level="$2"
  declare -A colors=(
    ["error"]="31"   # red
    ["warning"]="33" # yellow
    ["ok"]="32"      # green
    ["info"]="1"     # bold
    ["reset"]="0"    # here just to note reset code
  )
  if [[ -z "${level}" ]] || [[ -z "${colors[$level]}" ]]; then
    level="info"
  fi
  if [[ -t 1 ]]; then
    echo -e "\e[${colors[$level]}m${message}\e[0m" 1>&2
  else
    echo "${message}" 1>&2
  fi
}

# log_fatal is a "log MESSAGE error" followed by an "exit 1".
log_fatal() {
  local message="$1"
  log "${message}" error
  exit 1
}

# load_status returns the LoadState of the restic unit. This is to make sure
# that we even know what the service is - systemctl show will still return data
# even if the unit does not exist.
load_status() {
  local systemctl_out=""
  if ! systemctl_out="$(systemctl --user --property=LoadState show restic.service)"; then 
    return 1
  fi
  IFS="=" read -r -a load_status <<< "${systemctl_out}"
  echo "${load_status[1]}"
}

# restic_status returns the ActiveState property of the restic service.
restic_status() {
  # chain in load_status, just in case the unit has not been found.
  local load_status_out=""
  if ! load_status_out="$(load_status)"; then
    return 1
  fi
  if [[ "${load_status_out}" == "not-found" ]]; then
    echo "${load_status_out}"
    return
  fi
  local systemctl_out=""
  if ! systemctl_out="$(systemctl --user --property=ActiveState show restic.service)"; then
    return 1
  fi
  IFS="=" read -r -a active_state <<< "${systemctl_out}"
  echo "${active_state[1]}"
}

# format_hourglass displays a different hourglass icon depending on the modulo
# of the time of day.
format_hourglass() {
  local mod=""
  if ! mod=$(( $(date +%s) % 3 )); then
    return 1
  fi
  case "${mod}" in
    "0")
      echo ""
      ;;
    "1")
      echo ""
      ;;
    "2")
      echo ""
      ;;
    *)
      echo ""
      ;;
  esac
}

# format_check_ok displays a different icon for inactive statuses - if the last
# backup was recently (defined by warn_no_backup), then we display an OK
# status, if not, we warn with a warning color.
format_check_ok() {
  local systemctl_out=""
  local exit_timestamp_unix=""
  local current_timestamp_unix=""
  if ! systemctl_out="$(systemctl --user --property=ExecMainExitTimestamp show restic.service)"; then
    return 1
  fi
  IFS="=" read -r -a exit_timestamp <<< "${systemctl_out}"
  if [[ -z "${exit_timestamp[1]}" ]]; then
    exit_timestamp_unix="0"
  else
    if ! exit_timestamp_unix="$(date +%s --date="${exit_timestamp[1]}")"; then
      return 1
    fi
  fi
  if ! current_timestamp_unix="$(date +%s)"; then
    return 1
  fi
  if (( current_timestamp_unix - warn_no_backup > exit_timestamp_unix )); then
    echo -e "\n\n#ffa500"
  else
    echo ""
  fi
}


# format displays a symbol depending on the current backup status - a check
# mark for success, an hourglass for running, and an X mark for failure.
#
# In addition, if there is no status given that we know about, a question mark
# is displayed.
format() {
  local out=""
  local status=""
  if ! status="$(restic_status)"; then
    return 1
  fi
  case "${status}" in
    "active")
      # Backup job is running, but we want to display a fancy animated icon.
      if ! out="$(format_hourglass)"; then
        return 1
      fi
      echo "${out}"
      ;;
    "failed")
      # Failed - print failure glyph with error color
      echo -e "\n\n#ff0000"
      ;;
    "inactive")
      # Just check to see if the job has run recently
      if ! out="$(format_check_ok)"; then
        return 1
      fi
      echo "${out}"
      ;;
    *)
      echo -e "\n\n#ffa500"
      ;;
  esac
}

case $BLOCK_BUTTON in
  "1")
    i3-msg 'exec --no-startup-id i3-sensible-terminal --title "Restic Status" -e "systemctl --user status restic.service"' >/dev/null
    ;;
  "3")
    if ! status="$(restic_status)"; then
      log_fatal "fatal: error checking restic status"
    fi
    if [[ "${status}" != "active" ]]; then
      if ! systemctl --user start restic.service; then
        log_fatal "fatal: error starting restic.service user service to run backup"
      fi
    fi
    ;;
esac

if ! format; then
  log_fatal "fatal: error rendering block"
fi
