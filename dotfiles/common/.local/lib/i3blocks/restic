#!/usr/bin/env bash

# The time to warn when there hasn't been a backup in a while, in seconds.
warn_no_backup="86400"

# exit_if_error exits with error 127, printing the error code given to it to
# stderr if it is non-zero.
exit_if_error() {
  local source="$1"
  local code="$2"
  if [[ ${code} != "0" ]]; then
    echo "${source} exited with error ${code}" >&2
    exit 127
  fi
}

# load_status returns the LoadState of the restic unit. This is to make sure
# that we even know what the service is - systemctl show will still return data
# even if the unit does not exist.
load_status() {
  local systemctl_out=""
  systemctl_out=$(systemctl --user --property=LoadState show restic.service)
  exit_if_error "systemctl" "$?"
  IFS="=" read -r -a load_status <<< "${systemctl_out}"
  echo "${load_status[1]}"
}

# restic_status returns the ActiveState property of the restic service.
restic_status() {
  # chain in load_status, just in case the unit has not been found.
  local load_status_out=""
  load_status_out="$(load_status)"
  exit_if_error "checking load status" "$?"
  if [[ "${load_status_out}" == "not-found" ]]; then
    echo "${load_status_out}"
    return
  fi
  local systemctl_out=""
  systemctl_out=$(systemctl --user --property=ActiveState show restic.service)
  exit_if_error "systemctl" "$?"
  IFS="=" read -r -a active_state <<< "${systemctl_out}"
  echo "${active_state[1]}"
}

# format_hourglass displays a different hourglass icon depending on the modulo
# of the time of day.
format_hourglass() {
  local mod=""
  mod=$(( $(date +%s) % 3 ))
  exit_if_error "fetching system date" "$?"
  case "${mod}" in
    "0")
      echo ""
      ;;
    "1")
      echo ""
      ;;
    "2")
      echo ""
      ;;
    *)
      echo ""
      ;;
  esac
}

# format_check_ok displays a different icon for inactive statuses - if the last
# backup was recently (defined by warn_no_backup), then we display an OK
# status, if not, we warn with a warning color.
format_check_ok() {
  local systemctl_out=""
  local exit_timestamp_unix=""
  local current_timestamp_unix=""
  systemctl_out=$(systemctl --user --property=ExecMainExitTimestamp show restic.service)
  exit_if_error "systemctl" "$?"
  IFS="=" read -r -a exit_timestamp <<< "${systemctl_out}"
  if [[ -z "${exit_timestamp[1]}" ]]; then
    exit_timestamp_unix="0"
  else
    exit_timestamp_unix="$(date +%s --date="${exit_timestamp[1]}")"
  fi
  exit_if_error "converting datestamp to unix time" "$?"
  current_timestamp_unix="$(date +%s)"
  exit_if_error "getting current UNIX time" "$?"
  if (( current_timestamp_unix - warn_no_backup > exit_timestamp_unix )); then
    echo -e "\n\n#ffa500"
  else
    echo ""
  fi
}


# format displays a symbol depending on the current backup status - a check
# mark for success, an hourglass for running, and an X mark for failure.
#
# In addition, if there is no status given that we know about, a question mark
# is displayed.
format() {
  local out=""
  local status=""
  status="$(restic_status)"
  exit_if_error "restic_status" "$?"
  case "${status}" in
    "active")
      # Backup job is running, but we want to display a fancy animated icon.
      out="$(format_hourglass)"
      exit_if_error "fetching in-progress animation" "$?"
      echo "${out}"
      ;;
    "failed")
      # Failed - print failure glyph with error color
      echo -e "\n\n#ff0000"
      ;;
    "inactive")
      # Just check to see if the job has run recently
      out="$(format_check_ok)"
      exit_if_error "checking for OK status" "$?"
      echo "${out}"
      ;;
    *)
      echo -e "\n\n#ffa500"
      ;;
  esac
}

case $BLOCK_BUTTON in
  "1")
    i3-msg 'exec --no-startup-id i3-sensible-terminal --title "Restic Status" -e "systemctl --user status restic.service"' >/dev/null
    ;;
  "3")
    status="$(restic_status)"
    exit_if_error "restic_status" "$?"
    if [[ "${status}" != "active" ]]; then
      systemctl --user start restic.service
    fi
    ;;
esac

format
