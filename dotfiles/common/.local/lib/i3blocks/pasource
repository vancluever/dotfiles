#!/bin/bash

# This block allows you to control the volume of 2 named PA sinks (audio
# outputs): normally your headphones or speakers.
#
# This script looks for 2 sinks defined in ~/.config/pulse/local_devices:
#  * headset=<device name of your headset>
#  * camera=<device name of your camera mic, or onboard mic for laptops>
# You can get more info on this by running "pacmd list-sources".

# log prints a message with an optional priority, which controls the color also
# printed if a terminal is present. Messages always go to standard error.
#
# level is optional, and if not specified defaults to info.
log() {
  local message="$1"
  local level="$2"
  declare -A colors=(
    ["error"]="31"   # red
    ["warning"]="33" # yellow
    ["ok"]="32"      # green
    ["info"]="1"     # bold
    ["reset"]="0"    # here just to note reset code
  )
  if [[ -z "${level}" ]] || [[ -z "${colors[$level]}" ]]; then
    level="info"
  fi
  if [[ -t 1 ]]; then
    echo -e "\e[${colors[$level]}m${message}\e[0m" 1>&2
  else
    echo "${message}" 1>&2
  fi
}

# log_fatal is a "log MESSAGE error" followed by an "exit 1".
log_fatal() {
  local message="$1"
  log "${message}" error
  exit 1
}

declare -A pa_devices
while read -r line; do
  IFS="=" read -ra parts <<< "${line}"
  pa_devices["${parts[0]}"]="${parts[*]:1}"
done < "${HOME}/.config/pulse/local_devices"

if [[ -z "${pa_devices[headset]}" ]]; then
  log_fatal "fatal: please define your headset device in ~/.config/pulse/local_devices"
fi

if [[ -z "${pa_devices[camera]}" ]]; then
  log_fatal "fatal: please define your camera device in ~/.config/pulse/local_devices"
fi

# The mixer real-time signal. This will signal to the mixer to immediately
# update its volume reading upon switching inputs via this block.
mixer_signal="11"

# default_source gets the default source name.
default_source() {
  local pacmd_out=""
  if ! pacmd_out=($(pacmd stat | grep 'Default source name')); then
    return 1
  fi
  echo "${pacmd_out[-1]}"
}

# source_id gets the source ID for a specific name.
source_id() {
  local name="$1"
  if ! pactl_out=($(pactl list short sources | grep "${name}")); then
    return 1
  fi
  echo "${pactl_out[0]}"
}

# format displays a symbol depending on the current default source - headset or
# camera.
format() {
  local source_name=""
  if ! source_name="$(default_source)"; then
    return 1
  fi
  if [[ "${source_name}" == "${pa_devices[headset]}" ]]; then
    echo ""
  else
    echo ""
  fi
}

# move_source_outputs moves all the outputs that are set to the old source to
# the new source.
move_source_outputs() {
  local old="$1"
  local new="$2"
  local source_outputs=""
  if ! source_outputs=$(pactl list short source-outputs | grep -E "^[0-9]{1,}[[:space:]]{1,}${old}" | awk '{print $1}'); then
    return 1
  fi
  for input in ${source_outputs}; do
    if ! pacmd move-source-output "${input}" "${new}"; then
      return 1
    fi
  done
}

# toggle_default switches the default between the headset and camera source.
toggle_default() {
  local current=""
  local current_id=""
  local new=""
  local new_id=""
  if ! current="$(default_source)"; then
    log_fatal "fatal: error finding current source"
  fi
  if ! current_id="$(source_id "${current}")"; then
    log_fatal "fatal: error finding source ID for current input"
  fi
  case "${current}" in
    "${pa_devices[headset]}")
      new="${pa_devices[camera]}"
      ;;
    "${pa_devices[camera]}")
      new="${pa_devices[headset]}"
      ;;
    *)
      log_fatal "fatal: could not determine source type for default source: ${current}"
      ;;
  esac
  if ! new_id="$(source_id "${new}")"; then
    log_fatal "fatal: error finding ID for new source" "$?"
  fi
  if ! pactl set-default-source "${new}"; then
    log_fatal "fatal: error running pactl set-default-source"
  fi
  if ! move_source_outputs "${current_id}" "${new_id}"; then
    log_fatal "fatal: error moving source outputs to new source"
  fi

  # Update the mixer's volume.
  kill -s "RTMIN+${mixer_signal}" "$(pidof i3blocks)"
}

#------------------------------------------------------------------------

case $BLOCK_BUTTON in
  3) toggle_default ;;  # right click, toggle default
esac

if ! format; then
  log_fatal "fatal: error rendering block"
fi
